{"version":3,"sources":["components/Break.jsx","components/session.jsx","components/timeLeft.jsx","App.js","serviceWorker.js","index.js"],"names":["Break","props","breakLength","decrementBreakLengthByOneMin","incrementBreakLengthByOneMin","breakLengthInMin","moment","duration","minutes","id","class","onClick","Session","sessionLength","decrementSessionLengthByOneMin","incrementSessionLengthByOneMin","sessionLengthInMin","asMinutes","momentDurationFormatSetup","TimeLeft","timerLabel","handleStartStopClick","startStopButtonLabel","timeLeft","formattedTimeLeft","format","trim","className","style","marginTop","App","audioElement","useRef","useState","setSessionLength","currentSession","setCurrentSession","intervalId","setIntervalId","setTimeLeft","setBreakLength","useEffect","isStarted","backgroundImage","backgroundRepeat","backgroundSize","height","width","newBreakLength","fontFamily","fontSize","newIntervalId","setInterval","prevTimeLeft","newTimeLeft","current","play","clearInterval","newSessionLength","newsessionLength","load","ref","src","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77407484.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment'\r\n\r\nconst Break = (props) =>{\r\n\r\n    const {breakLength,\r\n        decrementBreakLengthByOneMin,\r\n        incrementBreakLengthByOneMin} = props\r\n\r\n    const breakLengthInMin = moment.duration(breakLength,'s').minutes()\r\n\r\n    return (\r\n        <div>\r\n       <p id=\"break-label\"><h3>Break</h3></p>\r\n       <p id=\"break-length\"><h3>{breakLengthInMin}</h3></p>\r\n       <button class=\"btn btn-info\" id=\"break-increment\" onClick={incrementBreakLengthByOneMin}><h3>+</h3></button>\r\n       <button class=\"btn btn-info\" id=\"break-decrement\" onClick={decrementBreakLengthByOneMin}><h3>-</h3></button>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Break","import React from 'react';\r\nimport moment from 'moment'\r\n\r\nconst Session =(props) =>{\r\n    const  {\r\n        sessionLength,\r\n        decrementSessionLengthByOneMin,\r\n        incrementSessionLengthByOneMin\r\n    } = props;\r\n   \r\n\r\n    const sessionLengthInMin = moment.duration(sessionLength,'s').asMinutes()\r\n\r\n\r\n    return (\r\n        <div>\r\n       <p id=\"session-label\"><h3>Session</h3></p>\r\n       <p id=\"session-length\"><h3>{sessionLengthInMin}</h3></p>\r\n       <button class=\"btn btn-info\" id=\"session-increment\" onClick={incrementSessionLengthByOneMin}><h3>+</h3></button>\r\n       <button class=\"btn btn-info\" id=\"session-decrement\" onClick={decrementSessionLengthByOneMin}><h3>-</h3></button>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Session","import React from 'react';\r\nimport moment from 'moment'\r\nimport momentDurationFormatSetup from 'moment-duration-format'\r\n\r\nmomentDurationFormatSetup(moment)\r\n\r\nconst TimeLeft = (props) =>{\r\n\r\n    const {timerLabel,handleStartStopClick,\r\n    startStopButtonLabel,timeLeft} = props\r\n    \r\n    const formattedTimeLeft = moment.duration(timeLeft,'s').format('mm:ss',{trim: false})\r\n   \r\n\r\n    return (\r\n        <div className='align-items-center' style={{marginTop : '10px'}}>\r\n            <p  id='timer-label'><h2>{timerLabel}</h2></p>\r\n            <p id='time-left' ><h2>{formattedTimeLeft}</h2></p>\r\n            <button class=\"btn btn-info\" id=\"start_stop\" onClick={handleStartStopClick}><h3>{startStopButtonLabel}</h3></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimeLeft; ","import React,{useState, useEffect, useRef} from 'react';\nimport './App.css';\nimport Break from './components/Break'\nimport Session from './components/session'\nimport TimeLeft from './components/timeLeft'\n\nfunction App() {\n  const audioElement = useRef(null)\n  const [sessionLength,setSessionLength] = useState(60*25);\n  const [currentSession,setCurrentSession] = useState('Session');\n  const [intervalId,setIntervalId] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(sessionLength);\n  const [breakLength,setBreakLength] = useState(300)\n\n  useEffect(() => {\n    setTimeLeft(sessionLength);\n    },[sessionLength]);\n\n  const decrementSessionLengthByOneMin = () => {\n      const newSessionLength = sessionLength - 60;\n\n      if(newSessionLength > 0 ){\n          setSessionLength(newSessionLength)\n  }}\n\n  const incrementSessionLengthByOneMin = () => {\n      const newsessionLength = sessionLength+60\n\n      if (newsessionLength <= 60*60){\n        setSessionLength(newsessionLength)\n      }\n      \n  };\n\n\n  const decrementBreakLengthByOneMin = () => {\n        const newBreakLength = breakLength - 60;\n        \n        if(newBreakLength >0){\n          setBreakLength(newBreakLength)\n        }\n\n    }\n\n    const incrementBreakLengthByOneMin = () => {\n        const newBreakLength = breakLength+60\n\n        if(newBreakLength <= 60*60){\n            setBreakLength(newBreakLength)\n        }\n        \n    }\n\n    const isStarted = intervalId != null\n\n    const handleStartStopClick = () =>{\n        if (isStarted){\n            clearInterval(intervalId)\n            setIntervalId(null)\n        }else{\n           const newIntervalId = setInterval(() => {\n                setTimeLeft((prevTimeLeft) => {\n                    const newTimeLeft = prevTimeLeft -1\n                    if(newTimeLeft >= 0){\n                        return  newTimeLeft\n                    }\n\n                    audioElement.current.play()\n\n                    if(currentSession ==='Session'){\n                        setCurrentSession('Break');\n                        return (breakLength);\n                    }else if(currentSession ==='Break'){\n                        setCurrentSession('Session');\n                        return sessionLength;\n                    }\n                   }) },1000)\n\n                   return setIntervalId(newIntervalId)\n        } \n        }\n\n    const handleResetButtonClick = () =>{\n        audioElement.current.load()\n        clearInterval(intervalId);\n        setIntervalId(null)\n        setCurrentSession('Session');\n        setSessionLength(60*25)\n        setBreakLength(60*5)\n        setTimeLeft(60*25)\n\n    }\n\n\n  return (\n    <div className=\"App w-100 h-100\">\n        <div className=\"container border border-info align-middle\" style={{\n        backgroundImage: `url(\"https://mdbootstrap.com/img/Photos/Horizontal/Nature/full page/img(11).jpg\")`,backgroundRepeat: 'no-repeat', backgroundSize:'cover', height:'100%', width:'100%', marginTop:'15px'\n      }}>\n         <div >\n             <div className='row justify-content-md-center'>\n                <Break\n                breakLength={breakLength}\n                decrementBreakLengthByOneMin = {decrementBreakLengthByOneMin}\n                incrementBreakLengthByOneMin = {incrementBreakLengthByOneMin}/>\n            </div>\n\n            <div className=\"row justify-content-md-center \" >\n                <div className='col-md-3 rounded-circle bg-dark text-white' style={{fontFamily:'Roboto', fontSize: '20px', height:'200px'}}>\n                <TimeLeft \n                     timerLabel ={currentSession}\n                     handleStartStopClick={handleStartStopClick}\n                     startStopButtonLabel={isStarted? 'Stop' :'Start'}\n                     timeLeft={timeLeft}/>\n                     </div>\n            </div>\n\n            <div className=\"row justify-content-md-center\" >\n                <Session\n            \n                sessionLength = {sessionLength}\n                decrementSessionLengthByOneMin = {decrementSessionLengthByOneMin}\n                incrementSessionLengthByOneMin = {incrementSessionLengthByOneMin} />\n            \n                </div>\n            \n            <div className=\"row justify-content-md-center\">\n\n                 <button className=\"btn btn-danger\" id='reset' onClick={handleResetButtonClick}><h4>Reset</h4></button>\n\n            </div>\n\n      <audio id='beep' ref={audioElement} >\n          <source src='https://onlineclock.net/audio/options/default.mp3' type='audio/mpeg' ></source>\n      </audio>\n\n      </div>\n      </div>\n      </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}